agents[num_contacts <= 2, num_contacts := 3]
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
View(agents)
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
agents[,contacts:=sample(sp_id,size = num_contacts, replace = F)]
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
unique_ids = unique(agents$sp_id)
sample_contacts = function(i){
my_agent = agents[i,]
my_id = my_agents[,sp_id]
out = sample(unique_ids, my_agent[,num_contacts], replace = F)
out = out[out != my_id]
out
}
#agents[,contacts:=sample(sp_id,size = num_contacts,replace = F)]
out
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
unique_ids = unique(agents$sp_id)
sample_contacts = function(i){
my_agent = agents[i,]
my_id = my_agents[,sp_id]
out = sample(unique_ids, my_agent[,num_contacts], replace = F)
out = out[out != my_id]
out
}
#agents[,contacts:=sample(sp_id,size = num_contacts,replace = F)]
agents[,contacts:=lapply(!:.N, sample_contacts)]
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
unique_ids = unique(agents$sp_id)
sample_contacts = function(i){
my_agent = agents[i,]
my_id = my_agents[,sp_id]
out = sample(unique_ids, my_agent[,num_contacts], replace = F)
out = out[out != my_id]
out
}
#agents[,contacts:=sample(sp_id,size = num_contacts,replace = F)]
agents[,contacts:=lapply(.N, sample_contacts)]
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
unique_ids = unique(agents$sp_id)
sample_contacts = function(i){
my_agent = agents[i,]
my_id = my_agent[,sp_id]
out = sample(unique_ids, my_agent[,num_contacts], replace = F)
out = out[out != my_id]
out
}
#agents[,contacts:=sample(sp_id,size = num_contacts,replace = F)]
agents[,contacts:=lapply(.N, sample_contacts)]
View(agents)
agents[20,]
agents[20,contacts]
prop.test(60,400,0.1, alternative = "greater", correct = FALSE, conf.level = 0.05)
dat <- read.csv("/Users/dylanmack/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/SOC 3050")
dat <- read.csv("/Users/dylanmack/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/SOC 3050/LinearRegressionHWData.csv")
View(dat)
model <- lm(Income ~ Age, data = dat)
model
plot(dat$Age, dat$Income)
plot(dat$Age, dat$Income, main = "Income vs. Age", xlab = "Age (yrs)", ylab = "Income ($)")
model <- lm(Income ~ Age, data = dat)
plot(dat$Age, dat$Income, main = "Income vs. Age", xlab = "Age (yrs)", ylab = "Income ($)")
abline(model$coefficients[1], model$coefficients[2])
inc_65 = model$coefficients[1]
inc_65
inc_65*2
inc_65 = model$coefficients[1][1]
inc_65
inc_65 = model$coefficients[1][2]
inc_65 = model$coefficients[1] + model$coefficients[2]*(65)
inc_65
dat <- read.csv("/Users/dylanmack/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/SOC 3050/LinearRegressionHWData.csv")
model <- lm(Income ~ Age, data = dat)
plot(dat$Age, dat$Income, main = "Income vs. Age", xlab = "Age (yrs)", ylab = "Income ($)")
abline(model$coefficients[1], model$coefficients[2])
inc_65 = model$coefficients[1] + model$coefficients[2]*(65)
View(dat)
test <- dat %>%
filter(age == 65)
library(dplyr)
test <- dat %>%
filter(age == 65)
test <- dat %>%
filter(Age == 65)
View(test)
library(dplyr)
dat <- read.csv("/Users/dylanmack/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/SOC 3050/MultipleLinearRegressionData.csv")
View(dat)
View(dat)
lm(LifeExpectancy ~ YearsSmoked, data = dat)
plot(dat$YearsSmoked, dat$LifeExpectancy)
lm(LifeExpectancy ~ YearsSmoked + NumCats + LifetimeMilesRan, data = dat)
plot(dat$NumCats, dat$LifetimeMilesRan)
plot(dat$NumCats, dat$LifeExpectancy)
knitr::opts_chunk$set(warning = F, message = F)
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
unique_ids = unique(agents$sp_id)
sample_contacts = function(i){
my_agent = agents[i,]
my_id = my_agent[,sp_id]
out = sample(unique_ids, my_agent[,num_contacts], replace = F)
out = out[out != my_id]
out
}
#agents[,contacts:=sample(sp_id,size = num_contacts,replace = F)]
agents[,contacts:=lapply(.N, sample_contacts)]
adj_list = list(c(2,3), c(1,3), c(1,2))
graph = graph_from_adj_list(adj_list)
library(igraph)
graph = graph_from_adj_list(adj_list)
plot(graph)
View(adj_list)
adj_list = agents$contacts[1:3]
adj_list_good = list(c(2,3), c(1,3), c(1,2))
length(agents$contacts[1])
agents$contacts[1]
test <- agents$contacts[1]
View(test)
test <- agents$contacts[1][1]
test <- agents$contacts[[1]]
typeof(test)
test
View(adj_list_good)
adj_list = agents$contacts[1:3]
adj_list_good = list(c(2,3), c(1,3), c(1,2))
View(adj_list)
adj_list[[1]]
length(adj_list[[1]])
adj_list = agents$contacts[1]
adj_list = agents$contacts[1]
graph = graph_from_adj_list(adj_list)
View(graph)
library(data.table) # data wrangling
library(tidyverse) # data wrangling
library(ggmap) # maps
library(scattermore) # high performance scatter plots
library(cowplot) # combining plots
library(RColorBrewer) # colors
# load ggmap
data_path = c("small" = '../data/sample-simulation-data-small.csv',
"full"  = '../data/sample-simulation-data.csv')
data = fread(data_path['small'])
stl_map = readRDS(file = '../data/ggmap-STL-background.RDS')
# add column to dataset denoting IDs of contacts
agents = data[tick == 1, c("sp_id", "latitude", "longitude")]
agents[,num_contacts:=rnorm(.N, mean = 12, sd = 2)|>as.integer()]
agents[num_contacts <= 2, num_contacts := 3]
unique_ids = unique(agents$sp_id)
sample_contacts = function(i){
my_agent = agents[i,]
my_id = my_agent[,sp_id]
out = sample(unique_ids, my_agent[,num_contacts], replace = F)
out = out[out != my_id]
out
}
#agents[,contacts:=sample(sp_id,size = num_contacts,replace = F)]
agents[,contacts:=lapply(.N, sample_contacts)]
View(agents)
997*20
library(igraph)
adj_list_good = list(c(2,3), c(1,3), c(1,2,4), c(3,5,6,9,10), c(4,7,8,10), c(4,8), c(5,8,9,10), c(5,6,7), c(4,7), c(4,5,7))
View(adj_list_good)
graph = graph_from_adj_list(adj_list)
graph = graph_from_adj_list(adj_list_good)
plot(graph)
adj_list = list(c(2,3), c(1,3), c(1,2,4), c(3,5,6,9,10), c(4,7,8,10), c(4,8), c(5,8,9,10), c(5,6,7), c(4,7), c(4,5,7))
adj_list[1]
contacts <- function(id, adj_list) {
return(adj_list[id])
}
contacts(3, adj_list)
contacts_of_three = contacts(3, adj_list)
graph = graph_from_adj_list(contacts_of_three)
plot(graph)
graph = graph_from_adj_list(adj_list, mode = "all")
plot(graph)
adj_list[3]
adj_list[[3]]
adj_list[adj_list[[3]]]
contacts_subnetwork <- function(id, adj_list) {
new_adj_list = adj_list[adj_list[[id]]]
return(graph_from_adj_list(new_adj_list, mode = "all"))
}
contacts_of_three = contacts(3, adj_list)
plot(contacts_of_three)
adj_list = list(c(2,3), c(1,3), c(1,2,4), c(3,5,6,9,10), c(4,7,8,10), c(4,8), c(5,8,9,10), c(5,6,7), c(4,7), c(4,5,7))
contacts_subnetwork <- function(id, adj_list) {
new_adj_list = adj_list[adj_list[[id]]]
#graph_from_adj_list(new_adj_list, mode = "all")
return(new_adj_list)
}
contacts_of_three = contacts(3, adj_list)
View(contacts_of_three)
adj_list[3]
adj_list[adj_list[[3]]]
contacts_subnetwork <- function(id, adj_list) {
new_adj_list = adj_list[adj_list[[id]]]
#graph_from_adj_list(new_adj_list, mode = "all")
return(new_adj_list)
}
contacts_of_three = contacts(3, adj_list)
contacts_of_three = contacts_subnetwork(3, adj_list)
contacts_subnetwork <- function(id, adj_list) {
new_adj_list = adj_list[adj_list[[id]]]
return(graph_from_adj_list(new_adj_list, mode = "all"))
}
contacts_of_three = contacts_subnetwork(3, adj_list)
contacts_subnetwork <- function(id, adj_list) {
new_adj_list = adj_list[adj_list[[id]]]
#return(graph_from_adj_list(new_adj_list, mode = "all"))
return(new_adj_list)
}
contacts_of_three = contacts_subnetwork(3, adj_list)
adj_list[[3]]
c(adj_list[[3]], 3)
adj_list[c(adj_list[[3]], 3)]
adj_list[3]
adj_list[[3]]
contacts_subnetwork <- function(id, adj_list) {
#new_adj_list = adj_list[adj_list[[id]]]
#return(graph_from_adj_list(new_adj_list, mode = "all"))
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, adj_list[[id]]))
}
contacts_of_three = contacts_subnetwork(3, adj_list)
plot(contacts_of_three)
graph = graph_from_adj_list(adj_list, mode = "all")
plot(graph)
contacts_subnetwork <- function(id, adj_list) {
#new_adj_list = adj_list[adj_list[[id]]]
#return(graph_from_adj_list(new_adj_list, mode = "all"))
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, c(adj_list[[id]], id)))
}
contacts_of_three = contacts_subnetwork(3, adj_list)
plot(contacts_of_three)
graph = graph_from_adj_list(adj_list, mode = "all")
plot(graph)
plot(contacts_of_three)
graph = graph_from_adj_list(adj_list, mode = "all")
plot(graph)
contacts_of_three = contacts_subnetwork(5, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(1, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(3, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(4, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(10, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(4, adj_list)
plot(contacts_of_three)
contacts_subnetwork <- function(id, adj_list) {
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, c(adj_list[[id]], id), imp = "copy_and_delete"))
}
contacts_of_three = contacts_subnetwork(4, adj_list)
contacts_subnetwork <- function(id, adj_list) {
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, c(adj_list[[id]], id), "copy_and_delete"))
}
contacts_of_three = contacts_subnetwork(4, adj_list)
contacts_subnetwork <- function(id, adj_list) {
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, c(adj_list[[id]], id), impl = "copy_and_delete"))
}
contacts_of_three = contacts_subnetwork(4, adj_list)
contacts_subnetwork <- function(id, adj_list) {
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(induced_subgraph(orig_graph, c(adj_list[[id]], id), impl = "copy_and_delete"))
}
contacts_of_three = contacts_subnetwork(4, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(1, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(2, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(3, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(4, adj_list)
plot(contacts_of_three)
typeof(agents$contacts)
typeof(agents$contacts[1])
typeof(agents$contacts[[1]])
length(agents$contacts[[1]])
contacts_subnetwork <- function(id, adj_list) {
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, c(adj_list[[id]], id)))
}
contacts_of_three = contacts_subnetwork(4, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(5, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(6, adj_list)
plot(contacts_of_three)
contacts_of_three = contacts_subnetwork(7, adj_list)
plot(contacts_of_three)
graph = graph_from_adj_list(adj_list, mode = "all")
plot(graph)
contacts_subnetwork <- function(id, adj_list) {
orig_graph = graph_from_adj_list(adj_list, mode = "all")
return(subgraph(orig_graph, c(adj_list[[id]], id)))
}
contacts_of_three = contacts_subnetwork(7, adj_list)
plot(contacts_of_three)
View(data)
library(tidycensus)
library(tidyverse)
acs_20_vars = load_variables(
year = 2020,
"acs5",
cache = TRUE
)
commute_by_income = get_acs(geography = "county", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
View(commute_by_income)
unique(acs_20_vars$geography)
library(tidycensus)
library(tidyverse)
acs_20_vars = load_variables(
year = 2020,
"acs5",
cache = TRUE
)
unique(acs_20_vars$geography)
commute_by_income = get_acs(geography = "block group", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
View(commute_by_income)
View(acs_20_vars)
commute_by_income = get_acs(geography = "tract", state = "MO", county = "St. Louis", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
commute_by_income = get_acs(geography = "tract", state = "MO", county = "St. Louis County", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
View(commute_by_income)
commute_by_income = get_acs(geography = "tract", state = "MO", county = "St. Louis city", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
commute_by_income = get_acs(geography = "tract", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
commute_by_income = get_acs(geography = "tract", state = "MO", table = "B08119", cache_table = TRUE)
View(commute_by_income)
commute_by_income = get_acs(geography = "tract", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name") %>%
filter(location == "St. Louis County, Missouri")
commute_by_income = get_acs(geography = "tract", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME)
View(commute_by_income)
commute_by_income = get_acs(geography = "tract", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
unique(commute_by_income$geography)
commute_by_income = get_acs(geography = "tract", state = "MO", variable = "B08119_010", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
commute_by_income = get_acs(geography = "tract", state = "MO", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
commute_by_income = get_acs(geography = "tract", state = "MO", county = "St. Louis County", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
View(commute_by_income)
commute_by_income = get_acs(geography = "tract", state = "MO", county = "St. Louis city", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
View(commute_by_income)
block_level_transit_vars = acs_20_vars %>%
filter(grepl("block group", geography, ignore.case = TRUE))
block_level_transit_vars = acs_20_vars %>%
filter(grepl("block group", geography, ignore.case = TRUE)) %>%
filter(grepl("trans", concept, ignore.case = TRUE))
View(block_level_transit_vars)
commute_by_income = get_acs(geography = "tract", state = "MO", county = "St. Louis city", table = "B08119", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
block_level_transit_mode = get_acs(geography = "block group", state = "MO", county = "St. Louis city", table = "B08301") %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
View(block_level_transit_mode)
write.csv(block_level_transit_mode, "block_level_transite_mode.csv")
View(acs_20_vars)
library(tidycensus)
library(tidyverse)
setwd("/Users/dylanmack/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/ESE 499/trio-capstone")
census_api_key("67c9126453c8bf858be1685cb7e4c9a48c712f5c", install = TRUE)
acs_20_vars = load_variables(
year = 2020,
"acs5",
cache = TRUE
)
letters = c('B', 'C', 'D', 'E', 'F', 'G', 'H', 'I')
B08105_stl_city = get_acs(geography = "tract", state = "MO", county = "St. Louis city", table = "B08105A", cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
for (letter in letters) {
placeholder = get_acs(geography = "tract", state = "MO", county = "St. Louis city", table = paste("B08105", letter, sep = ""), cache_table = TRUE) %>%
rename(name = variable, location = NAME) %>%
left_join(acs_20_vars, by = "name")
B08105_stl_city = rbind(B08105_stl_city, placeholder)
}
View(B08105_stl_city)
write_csv(B08105_stl_city, "B08105_stl_city.csv")
